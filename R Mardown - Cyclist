---
title: "Cyclist - Informe"
author: "Carlos Hernández"
date: "`r Sys.Date()`"
output:
  html_document:
    theme:
      bg: "#282727"
      fg: "#EDEDED"
      base_font:
        google: "Prompt"
fontsize: 12pt
lang: es-MX
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
options(repos = list(CRAN="http://cran.rstudio.com/"))
```


~~~
Este documento forma parte del ejercicio práctico final del curso "Google Data Analytics".
~~~

___

## Mapa de ruta del caso práctico.


***PREGUNTAR***

La tarea empresarial consiste en:

  "Establecer las diferencias en cuanto al uso de las bicicletas atendiendo al tipo de clientes del programa (ciclistas ocasionales y socios anuales)".


Los interesados clave son:

* Lily Moreno
* Equipo ejecutivo de *Cyclistic*




***PREPARAR***

Los datos para el desarrollo de este ejercicio práctico se obtivieron en el siguiente [link](https://divvy-tripdata.s3.amazonaws.com/index.html)

Los datos han sido proporcionados por Motivate International Inc. bajo esta [licencia](https://ride.divvybikes.com/data-license-agreement).) 

  ![](https://altago.com/wp-content/uploads/MotivateLogo.jpg){width=200px}         ![](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS6xAqPKD66S5OJRor_WRKv_MK5CLLDiqbCL7v8KMm3_uvKbrmMUyZDr5JXzQx_xc-_tg&usqp=CAU){width=194px}

Los datos proporcionados son públicos, permitiendo reproducirlos, analizarlos, copiarlos, modificarlos y distribuirlos.

Los datos están organizados en archivos que recogen los viajes mensuales en bicicleta, indicando las fechas y horas de salida y llegada a una estación, así como la georeferenciación de las mismas. La base recoge, además, datos sobre los tipos de bicicleta (*classic bike*, *docked bike* y *electric bike*). De igual manera, se recogen datos sobre los tipos de usuarios del servicio (*casual* y *member*). 


Los archivos se cargaron a Google Cloud Storage, debido al tamaño de los mismos. Una vez subidos a la nube, se creo la base de datos "*caso-cyclist*", conteniendo esta las 12 tablas con los datos de los viajes.

 ![Bucket Cyclistic](http://datnsght.cloud/wp-content/uploads/2022/07/Bucket_Cyclist.png){width=400px} ![Base de datos Cyclistic](http://datnsght.cloud/wp-content/uploads/2022/07/Base_Cyclist.png){width=503.5px}

Las tablas se importaron a R mediante la función "read.csv"

```{r import_tables}
`202206.divvy.tripdata` <- read.csv("D:/3. DATA ANALYSIS/PROYECTOS/1. CASO_Cyclistic/divvy-tripdata/202206-divvy-tripdata.csv")
`202205.divvy.tripdata` <- read.csv("D:/3. DATA ANALYSIS/PROYECTOS/1. CASO_Cyclistic/divvy-tripdata/202205-divvy-tripdata.csv")
`202204.divvy.tripdata` <- read.csv("D:/3. DATA ANALYSIS/PROYECTOS/1. CASO_Cyclistic/divvy-tripdata/202204-divvy-tripdata.csv")
`202203.divvy.tripdata` <- read.csv("D:/3. DATA ANALYSIS/PROYECTOS/1. CASO_Cyclistic/divvy-tripdata/202203-divvy-tripdata.csv")
`202202.divvy.tripdata` <- read.csv("D:/3. DATA ANALYSIS/PROYECTOS/1. CASO_Cyclistic/divvy-tripdata/202202-divvy-tripdata.csv")
`202201.divvy.tripdata` <- read.csv("D:/3. DATA ANALYSIS/PROYECTOS/1. CASO_Cyclistic/divvy-tripdata/202201-divvy-tripdata.csv")
`202112.divvy.tripdata` <- read.csv("D:/3. DATA ANALYSIS/PROYECTOS/1. CASO_Cyclistic/divvy-tripdata/202112-divvy-tripdata.csv")
`202111.divvy.tripdata` <- read.csv("D:/3. DATA ANALYSIS/PROYECTOS/1. CASO_Cyclistic/divvy-tripdata/202111-divvy-tripdata.csv")
`202110.divvy.tripdata` <- read.csv("D:/3. DATA ANALYSIS/PROYECTOS/1. CASO_Cyclistic/divvy-tripdata/202110-divvy-tripdata.csv")
`202109.divvy.tripdata` <- read.csv("D:/3. DATA ANALYSIS/PROYECTOS/1. CASO_Cyclistic/divvy-tripdata/202109-divvy-tripdata.csv")
`202108.divvy.tripdata` <- read.csv("D:/3. DATA ANALYSIS/PROYECTOS/1. CASO_Cyclistic/divvy-tripdata/202108-divvy-tripdata.csv")
`202107.divvy.tripdata` <- read.csv("D:/3. DATA ANALYSIS/PROYECTOS/1. CASO_Cyclistic/divvy-tripdata/202107-divvy-tripdata.csv")
```

***PROCESAR***

Con el objetivo de realizar el análisis a partir de una única base de datos concentrada, se decidión unir todas las bases en una sola (*trips*). Para ello, primeramente se realizó una limpieza de los nombres de las variables con **janitor::clean_names**. Se especificó (case = "title") como argumento para garantizar el aspecto visual en los gráficos posteriores. Seguidamente, se realizó un análisis de cada base de datos con la función **skimr::skim**, con el objetivo de verificar las características de las 13 variables en cada una de dichas bases.

```{r pack_lib_jan_skimr, eval=FALSE, include=FALSE}
install.packages("tidyverse", repos = "http://cran.us.r-project.org")
install.packages("janitor", repos = "http://cran.us.r-project.org")
install.packages("skimr", repos = "http://cran.us.r-project.org")
library(tidyverse)
library(janitor)
library(skimr)
```

```{r clean_names}
`202206.divvy.tripdata` <- `202206.divvy.tripdata` %>% 
  clean_names(case = "title")
`202205.divvy.tripdata` <- `202205.divvy.tripdata` %>% 
  clean_names(case = "title")
`202204.divvy.tripdata` <- `202204.divvy.tripdata` %>% 
  clean_names(case = "title")
`202203.divvy.tripdata` <- `202203.divvy.tripdata` %>% 
  clean_names(case = "title")
`202202.divvy.tripdata` <- `202202.divvy.tripdata` %>% 
  clean_names(case = "title")
`202201.divvy.tripdata` <- `202201.divvy.tripdata` %>% 
  clean_names(case = "title")
`202112.divvy.tripdata` <- `202112.divvy.tripdata` %>% 
  clean_names(case = "title")
`202111.divvy.tripdata` <- `202111.divvy.tripdata` %>% 
  clean_names(case = "title")
`202110.divvy.tripdata` <- `202110.divvy.tripdata` %>% 
  clean_names(case = "title")
`202109.divvy.tripdata` <- `202109.divvy.tripdata` %>% 
  clean_names(case = "title")
`202108.divvy.tripdata` <- `202108.divvy.tripdata` %>% 
  clean_names(case = "title")
`202107.divvy.tripdata` <- `202107.divvy.tripdata` %>% 
  clean_names(case = "title")
```

```{r caract_bases, include=FALSE}
skim(`202206.divvy.tripdata`)
skim(`202205.divvy.tripdata`)
skim(`202204.divvy.tripdata`)
skim(`202203.divvy.tripdata`)
skim(`202202.divvy.tripdata`)
skim(`202201.divvy.tripdata`)
skim(`202112.divvy.tripdata`)
skim(`202111.divvy.tripdata`)
skim(`202110.divvy.tripdata`)
skim(`202109.divvy.tripdata`)
skim(`202108.divvy.tripdata`)
skim(`202107.divvy.tripdata`)
```

Una vez confirmado que las bases contienen la misma cantidad y el mismo tipo de variables, se procedió a integrarlas en una sola, mediante el uso de **base::rbind**, y asignarle por nombre "trips" a la base resultante.

```{r uniendo_bases, eval=FALSE, include=FALSE}
trips <- rbind(`202206.divvy.tripdata`, `202205.divvy.tripdata`, `202204.divvy.tripdata`, `202203.divvy.tripdata`, `202202.divvy.tripdata`, 
`202201.divvy.tripdata`, `202112.divvy.tripdata`, `202111.divvy.tripdata`, `202110.divvy.tripdata`, `202109.divvy.tripdata`, 
`202108.divvy.tripdata`, `202107.divvy.tripdata`)
```

Para evitar futuros conflictos o incongruencias en el análisis, se aplicó la función **stats:na.omit** para eliminar los casos incompletos de la base (5374 valores perdidos correspondientes a "end_lat" y "end_lng").

```{r removiendo_NA, eval=FALSE, include=FALSE}
trips <- na.omit(trips)
```

Por último, para poder realizar análisis relacionados con patrones temporales, se utilizó el paquete **lubridate**, en particular la función **as_Date** y **ymd_hms**.

```{r}
install.packages("lubridate")
library(lubridate)

# Definir nuevas variables: Date, Month, Day, Year, Day_of_week

trips$Date <- as.Date(trips$`Started at`) # El formato por defecto el YYYY-MM-DD
trips$Month <- format(as.Date(trips$Date), "%m")
trips$Day <- format(as.Date(trips$Date), "%d")
trips$Year <- format(as.Date(trips$Date), "%Y")
trips$Day_of_week <- format(as.Date(trips$Date), "%A")


# Calcular la duración de los viajes (en segundos) como una nueva variable "Durac"
trips$Durac <- difftime(ymd_hms(trips$`Ended at`), ymd_hms(trips$`Started at`))
```

***ANALIZAR***

primeramente, se analizan estadísticos descriptivos para la variable "Durac", pudiéndose comprobar que hay valores negativos debido a que se capturaron, de manera incorrecta, horas de salida posteriores a las horas de llegada (la duración mínima es de -8245 segundos).

```{r}
trips %>% 
  summarize(dur_min = min(Durac))

trips %>% 
  summarize(dur_max = max(Durac))

trips %>% 
  summarize(dur_prom = mean(Durac))
```

A continuación, se convierte la variable "Durac" a numeric, se crea una nueva base de datos con el subconjunto de valores con duraciones de viajes mayores que cero. Finalmente, se verifica mediante los estadísticos de dispersión que, efectivamente, no hayan valores negativos para "Durac".

```{r}
# Convertir "durac" de Factor a numeric
trips$Durac <- as.numeric(as.character(trips$Durac))
is.numeric(trips$Durac)

summary(trips)

# Seleccionando solo los viajes con duración mayor que cero


trips2 <- trips[trips$Durac > 0,]

# Cmprobando

trips2 %>% 
  summarize(dur_min = min(Durac))

trips2 %>% 
  summarize(dur_max = max(Durac))

trips2 %>% 
  summarize(dur_prom = mean(Durac))
```

Otro análisis efectuado fue calcular la moda de la variable "Durac", siendo que el valor que más se repite es 349 seg (aproximadamente 6 minutos). Para ello, se necesitó utilizar **modeest::modeest**.

```{r}
# para calcular la moda de duración
install.packages("modeest")
library(modeest)

mlv(trips2$Durac, method = "mfv") # confrimar antes que Durac sea numeric

?mlv
```

Otro análisis efectuado fue el de los estadísticos de dispersión desagregados por "member_casual" y "rideable_type".

```{r}
# medidas de disperción por grupo de clientes

trips2 %>% 
  group_by(`Member Casual`) %>% 
  summarize(dur_min = min(Durac))

trips2 %>% 
  group_by(`Member Casual`) %>% 
  summarize(dur_max = max(Durac))

trips2 %>% 
  group_by(`Member Casual`) %>% 
  summarize(dur_prom = mean(Durac))

trips2 %>% 
  group_by(`Member Casual`) %>% 
  summarize(dur_mediana = median(Durac))

# medidas de disperción por grupo de "Rideable Type"

trips2 %>% 
  group_by(`Rideable Type`) %>% 
  summarize(dur_min = min(Durac))

trips2 %>% 
  group_by(`Rideable Type`) %>% 
  summarize(dur_max = max(Durac))

trips2 %>% 
  group_by(`Rideable Type`) %>% 
  summarize(dur_prom = mean(Durac))

trips2 %>% 
  group_by(`Rideable Type`) %>% 
  summarize(dur_mediana = median(Durac))
```

A continuación, se presenta el análisis de: 1) la duración del viaje por tipo de cliente y 2) duración del viaje por tipo de cliente y por día de la semana.

```{r}
# comparar duración del viaje por members y casuals

aggregate(trips2$Durac ~ trips2$`Member Casual`, FUN = mean)
aggregate(trips2$Durac ~ trips2$`Member Casual`, FUN = median)
aggregate(trips2$Durac ~ trips2$`Member Casual`, FUN = max)
aggregate(trips2$Durac ~ trips2$`Member Casual`, FUN = min)

?aggregate


# comparar duración del viaje por members y casuals por día de la semana

aggregate(trips2$Durac ~ trips2$`Member Casual` + trips2$Day_of_week, FUN = mean)
aggregate(trips2$Durac ~ trips2$`Member Casual` + trips2$Day_of_week, FUN = max)
aggregate(trips2$Durac ~ trips2$`Member Casual` + trips2$Day_of_week, FUN = min)
aggregate(trips2$Durac ~ trips2$`Member Casual` + trips2$Day_of_week, FUN = median)

# Analizar la información de los ciclistas por tipo y día de la semana 

trips2 %>%
  group_by(`Member Casual`, Day_of_week) %>%        # grupos por Tipo de usuario y Día de la semana
  summarise(number_of_rides = n(),
            average_duration = mean(Durac)) %>%     # Cálculo de la duración promedio
  arrange(`Member Casual`, Day_of_week)	            # Ordenación por Tipo de usuario y Día de la semana	 
```

Por último, se crearon visualizaciones sobre el número de viajes por Tipo de usuario, así como por la duración promedio de los viajes.

```{r}
# Visualizar el número de viajes por tipo de ciclista
trips2 %>% 
  mutate(Day_of_week = wday(`Started at`, label = TRUE)) %>% 
  group_by(`Member Casual`, Day_of_week) %>% 
  summarise(number_of_rides = n()
            ,average_duration = mean(Durac)) %>% 
  arrange(`Member Casual`, Day_of_week)  %>% 
  ggplot(aes(x = Day_of_week, y = number_of_rides, fill = `Member Casual`)) +
  geom_col(position = "dodge")

# Visualización por duración promedio de viaje
trips2 %>% 
  mutate(Day_of_week = wday(`Started at`, label = TRUE)) %>% 
  group_by(`Member Casual`, Day_of_week) %>% 
  summarise(number_of_rides = n()
            ,average_duration = mean(Durac)) %>% 
  arrange(`Member Casual`, Day_of_week)  %>% 
  ggplot(aes(x = Day_of_week, y = average_duration, fill = `Member Casual`)) +
  geom_col(position = "dodge")
```

*Nota*: Los resultados de los resultados del análisis de la duración de los viajes por tipo de usuario y por día de la semana, se exportaron a un archivo .csv para su posterior consulta.

```{r}
# Creación de un archivo para análisis posterior
counts <- aggregate(trips2$Durac ~ trips2$`Member Casual` + trips2$Day_of_week, FUN = mean)
write.csv(counts, file = "D:/3. DATA ANALYSIS/PROYECTOS/1. CASO_Cyclistic/durac_prom_viajes.csv")
```
